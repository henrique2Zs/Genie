import { Injectable } from '@angular/core';
import { Card } from '../class/card';
import { Firestore, collectionData, addDoc, setDoc, doc, DocumentReference, QueryDocumentSnapshot, collection, docData } from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { CardDB } from '../model/card';

@Injectable({
  providedIn: 'root'
})
export class CardsService {

  numsBuilt: number[] = new Array<number>();
  numsSent: number[] = new Array<number>();
  numsLiked: number[] = new Array<number>();
  numsWished: number[] = new Array<number>();
  // Variables generated by app and hide to user
  private numsSelectedToshow: number[] = new Array<number>();
  private numsReceived: number[] = new Array<number>();
  private pointerReceived = 0
  private lastNumberShowed = 0

  collectionBuilt: Card[] = new Array<Card>();
  collectionSent: Card[] = new Array<Card>();
  collectionLiked: Card[] = new Array<Card>();
  collectionSellection: Card[] = new Array<Card>();
  collectionWished: Card[] = new Array<Card>();
  allCardsArray: number[];

  allCardsMap: Map<number, Card> = new Map<number, Card>();
  selectedCard: Card;

  emuletedDBprovidecards: Map<number, Card> = new Map<number, Card>();

  cardsFirebase: Observable<Card[]>


  ngOnInit() { }

  constructor(private firestore: Firestore) {
    // Inicio datos de prueba
    this.emuletedDBprovidecards.set(1,
      new Card(
        1,
        "www.boom.com",
        "assets/patinete1.jpg",
        "Built",
        "test 1",

      ));
    this.emuletedDBprovidecards.set(2,
      new Card(
        2,
        "www.bing2",
        "assets/patinete1.jpg",
        "Liked",
        "test 2"
      ));
    this.emuletedDBprovidecards.set(3,
      new Card(
        3,
        "www.bing2",
        "assets/patinete1.jpg",
        "Sent",
        "test 3",
      ));
    this.emuletedDBprovidecards.set(4,
      new Card(
        4,
        "www.bing2",
        "assets/patinete1.jpg",
        "Wished",
        "test 4"
      ));
    this.emuletedDBprovidecards.set(5,
      new Card(
        5,
        "www.bing2",
        "assets/patinete1.jpg",
        "In Selection only",
        "test 5"
      ));
    this.emuletedDBprovidecards.set(6,
      new Card(
        6,
        "www.bing2",
        "assets/patinete1.jpg",
        "In Selection only",
        "test 6"
      ));
    this.emuletedDBprovidecards.set(7,
      new Card(7, "www.bing2", "assets/celta.jpg", "build", "test 7"));
    this.emuletedDBprovidecards.set(8,
      new Card(8, "www.bing2", "assets/courier.jpg", "build", "test 8"));
    this.emuletedDBprovidecards.set(9,
      new Card(9, "www.bing2", "assets/patinete1.jpg", "build", "test 9"));
    this.emuletedDBprovidecards.set(10,
      new Card(10, "www.bing2", "assets/xlx.jpg", "build", "test 10"));

    this.numsBuilt.push(1)
    this.numsBuilt.push(7)
    this.numsBuilt.push(8)
    this.numsBuilt.push(9)
    this.numsLiked.push(10)
    //this.numsSent.push(3) The service cardXContacts must to do this operation
    this.numsWished.push(4)
    this.numsReceived.push(6)

    this.cardsFirebase = this.getCardsDB()
    // Fin datos de prueba

    this.allCardsArray = this.buildArrayFromNumbersCard()
    this.buildAllCardsMap(this.allCardsArray)
    this.buildSelectionCardFromDB()

    console.log(this.cardsFirebase)
  }
  /* 
  * Recopile all numbers cards in a array to be used to build the main map
  * with all numbers card and those Cards
  */
  private buildArrayFromNumbersCard(): Array<number> {
    this.allCardsArray = new Array<number>();
    for (let num of this.numsBuilt) {
      if (!this.allCardsArray.includes(num))
        this.allCardsArray.push(num)
    }
    for (let num of this.numsLiked) {
      if (!this.allCardsArray.includes(num))
        this.allCardsArray.push(num)
    }
    for (let num of this.numsReceived) {
      if (!this.allCardsArray.includes(num))
        this.allCardsArray.push(num)
    }
    for (let num of this.numsSent) {
      if (!this.allCardsArray.includes(num))
        this.allCardsArray.push(num)
    }
    for (let num of this.numsWished) {
      if (!this.allCardsArray.includes(num))
        this.allCardsArray.push(num)
    }
    return this.allCardsArray
  }

  private buildAllCardsMap(arraysNumCards: Array<number>) {
    for (let num of arraysNumCards) {
      this.allCardsMap.set(num, this.getCardOnDB(num))
    }
  }

  public async addProductDB(card: Card) {
    const cardObj = {
      title: card.title,
      description: card.description,
      src: card.src,
      link: card.link
    }

    //QueryDocumentSnapshot.get("/cardsId")
    const cardUp = setDoc(doc(this.firestore, "/cards", card.id.toString()), cardObj)
      .then(() => console.log("CardUp guardado con éxito"), () => console.error("Card rejetado y no guardado"));
  }

  getCardsDB(): Observable<Card[]> {
    const collectionRef = collection(this.firestore, 'cards')
    return collectionData(collectionRef, { idField: 'cardId' }) as Observable<Card[]>
  }

  public getCardOnDB(num: number): Card {
    try {
      const docRef = doc(this.firestore, `/cards/${num.toString()}`)
      let docR = docData(docRef, { idField: 'cardId' }) as Observable<CardDB>
      let cardDB: CardDB
      docR.subscribe(
        data => cardDB = data
      );
      console.log(cardDB)
      //console.log(docRef.toString())

      console.log(num)
    } catch (error) {
      console.error(error)
    }
    let card = this.emuletedDBprovidecards.get(num)
    card.liked = this.numsLiked.includes(num)
    card.inWishList = this.numsWished.includes(num)
    return card
  }

  /*
  * Intent to pull a card from the database that this user is not the autor 
  * neither is inside from any list made by him.
  * However the result include those numbers cards send by a contact that is
  * in touch calling the method @selectReceivedcards. Finally the result is
  * ordered by id's cards to ramdomize and don't have a standard like first those 
  * received and after those from DB's suggest
  * The number tried could not exist because was censored or the end of all 
  * created card has reached.
  */
  public buildSelectionCardFromDB(): void {
    // TODO: Cambiar valor de endOfList por consulta a BBDD por el mayor número
    let endOfList = this.emuletedDBprovidecards.size
    this.numsSelectedToshow = new Array<number>();
    this.selectReceivedcards()
    // This block "while" is necessary because on block "for" can not find some number
    while (this.lastNumberShowed <= endOfList && this.numsSelectedToshow.length <= 10) {
      for (this.lastNumberShowed; endOfList >= this.lastNumberShowed; this.lastNumberShowed++) {
        if (!this.allCardsMap.has(this.lastNumberShowed)) {
          let result = this.emuletedDBprovidecards.get(this.lastNumberShowed)
          if (typeof result === 'object') {
            this.allCardsMap.set(result.id, result)
            this.numsSelectedToshow.push(result.id)
          }
        }
      }
    }
    this.numsSelectedToshow.sort()
  }

  /*
  * Put 5 numbers inside de collection that is showed in the Selection's page
  */
  private selectReceivedcards() {
    let length = this.numsReceived.length
    let startIndex = this.pointerReceived
    let diffLengthPointer = length - startIndex
    let endIndex = diffLengthPointer < 5 ? startIndex + diffLengthPointer : startIndex + 4
    this.numsSelectedToshow = this.numsReceived.slice(startIndex, endIndex)
    this.pointerReceived = endIndex
  }

  public getCards(): Map<number, Card> {
    return this.allCardsMap;
  }

  public getAcard(num: number): Card {
    return this.allCardsMap.get(num)
  }

  public put(card: Card): void {
    this.allCardsMap.set(card.id, card);
    this.numsBuilt.push(card.id)
    this.getCardsBuilt()
    //push card into db
    //pull cards from db
  }

  addInWishList(cardId: number) {
    this.numsWished.push(cardId)
    let card = this.getCards().get(cardId)
    card.inWishList = true
  }

  quitInWishList(cardId: number) {
    let arrayTemp = this.numsWished.filter(n => n != cardId)
    this.numsWished = arrayTemp
    let card = this.getCards().get(cardId)
    card.inWishList = false
  }

  addInLiked(cardId: number) {
    this.numsLiked.push(cardId)
    let card = this.getCards().get(cardId)
    card.liked = true
  }

  quitInLiked(cardId: number) {
    let arrayTemp = this.numsLiked.filter(n => n != cardId)
    this.numsLiked = arrayTemp
    let card = this.getCards().get(cardId)
    card.liked = false
  }

  /*
  * All this sequence of methods below getCards{map's name} are used by 
  * those respective page with the same name.
  * They are lazy maps methods because is called when it's needed.
  */
  public getCardsBuilt(): Card[] {
    this.collectionBuilt = this.buildCards(this.numsBuilt);
    return this.collectionBuilt
  }
  public getCardsSent(): Card[] {
    this.collectionSent = this.buildCards(this.numsSent);
    return this.collectionSent
  }
  public getCardsLiked(): Card[] {
    this.collectionLiked = this.buildCards(this.numsLiked);
    return this.collectionLiked
  }
  public getCardsSellection(): Card[] {
    this.collectionSellection = this.buildCards(this.numsSelectedToshow);
    return this.collectionSellection
  }
  public getCardsWished(): Card[] {
    this.collectionWished = this.buildCards(this.numsWished);
    return this.collectionWished
  }

  /*
  * Refresh arrays of cards from arrays of number cards inside this service
  */
  private buildCards(cardsnum: number[]): Card[] {
    let card: Card
    let collectionTemp = new Array<Card>()
    for (let num of cardsnum) {
      card = this.allCardsMap.get(num)
      collectionTemp.push(card)
    }
    return collectionTemp

  }
}