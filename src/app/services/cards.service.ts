import { Injectable } from '@angular/core';
import { Card } from '../class/card';

@Injectable({
  providedIn: 'root'
})
export class CardsService {

  numsBuilt: number[] = new Array<number>();
  numsSent: number[] = new Array<number>();
  numsLiked: number[] = new Array<number>();
  numsWished: number[] = new Array<number>();
  // Array generated by app and don't at knowleged by user
  numsSelection: number[] = new Array<number>();

  collectionBuilt: Card[] = new Array<Card>();
  collectionSent: Card[] = new Array<Card>();
  collectionLiked: Card[] = new Array<Card>();
  collectionSellection: Card[] = new Array<Card>();
  collectionWished: Card[] = new Array<Card>();

  allCardsMap: Map<number, Card> = new Map<number, Card>();
  selectedCard: Card;

  emuletedDBprovidecards: Map<number, Card> = new Map<number, Card>();


  ngOnInit() { }

  constructor() {
    // Inicio datos de prueba
    this.emuletedDBprovidecards.set(1,
      new Card(
        1,
        "www.boom.com",
        "/app/components/card/Captura.png",
        "Built",
        "test 1",
        1,
        "es"
      ));
    this.emuletedDBprovidecards.set(2,
      new Card(
        2,
        "www.bing2",
        "./app/card/Captura.png",
        "Liked",
        "test 2",
        2,
        "es"
      ));
    this.emuletedDBprovidecards.set(3,
      new Card(
        3,
        "www.bing2",
        "./app/card/Captura.png",
        "Sent",
        "test 3",
        3,
        "es"
      ));
    this.emuletedDBprovidecards.set(4,
      new Card(
        4,
        "www.bing2",
        "./app/card/Captura.png",
        "Wished and Selection",
        "test 4",
        4,
        "es"
      ));
    this.numsBuilt.push(1)
    this.numsLiked.push(2)
    this.numsSent.push(3)
    this.numsWished.push(4)
    this.numsSelection.push(4)
    this.numsSelection.push(3)
    // Fin datos de prueba

    let allCardsArray = this.buildArrayOfNumbersCard()
    this.buildAllCardsMap(allCardsArray)
  }
  /* 
  * Recopile all numbers cards in a array to be used to build the main map
  * with all numbers card and Cards
  */
  private buildArrayOfNumbersCard(): Array<number> {
    let allCardsArray = new Array<number>();
    for (let num of this.numsBuilt) {
      if (!allCardsArray.includes(num))
        allCardsArray.push(num)
    }
    for (let num of this.numsLiked) {
      if (!allCardsArray.includes(num))
        allCardsArray.push(num)
    }
    for (let num of this.numsSelection) {
      if (!allCardsArray.includes(num))
        allCardsArray.push(num)
    }
    for (let num of this.numsSent) {
      if (!allCardsArray.includes(num))
        allCardsArray.push(num)
    }
    for (let num of this.numsWished) {
      if (!allCardsArray.includes(num))
        allCardsArray.push(num)
    }
    return allCardsArray
  }

  private buildAllCardsMap(arraysNumCards: Array<number>) {
    for (let num of arraysNumCards) {
      this.allCardsMap.set(num, this.getCardOnDB(num))
    }
  }

  private getCardOnDB(num: number): Card {
    let card = this.emuletedDBprovidecards.get(num)
    card.liked = this.numsLiked.includes(num)
    card.inWishList = this.numsWished.includes(num)
    return card
  }

  public getCards(): Map<number, Card> {
    return this.allCardsMap;
  }

  public getAcard(num: number): Card {
    return this.allCardsMap.get(num)
  }

  public put(card: Card): void {
    this.allCardsMap.set(card.id, card);
    this.numsBuilt.push(card.id)
    this.getCardsBuilt()
    //push card into db
    //pull cards from db
  }

  addInWishList(cardId: number) {
    this.numsWished.push(cardId)
    let card = this.getCards().get(cardId)
    card.inWishList = true
  }

  quitInWishList(cardId: number) {
    let arrayTemp = this.numsWished.filter(n => n != cardId)
    this.numsWished = arrayTemp
    let card = this.getCards().get(cardId)
    card.inWishList = false
  }

  addInLiked(cardId: number) {
    this.numsLiked.push(cardId)
    let card = this.getCards().get(cardId)
    card.liked = true
  }

  quitInLiked(cardId: number) {
    let arrayTemp = this.numsLiked.filter(n => n != cardId)
    this.numsLiked = arrayTemp
    let card = this.getCards().get(cardId)
    card.liked = false
  }

  // TODO: GetCardsBuilt => collectionBuilt
  public getCardsBuilt(): Card[] {
    this.buildCards(this.numsBuilt, this.collectionBuilt);
    return this.collectionBuilt
  }
  public getCardsSent(): Card[] {
    this.buildCards(this.numsSent, this.collectionSent);
    return this.collectionSent
  }
  public getCardsLiked(): Card[] {
    this.buildCards(this.numsLiked, this.collectionLiked);
    return this.collectionLiked
  }
  public getCardsSellection(): Card[]{
    this.buildCards(this.numsSelection, this.collectionSellection);
    return this.collectionSellection
  }
  public getCardsWished(): Card[] {
    this.buildCards(this.numsWished, this.collectionWished);
    return this.collectionWished
  }

  /*
  * Refresh arrays of cards from arrays of number cards inside this service
  */
  private buildCards(cardsnum: number[], collection: Card[]): void {
    let card: Card
    for (let num of cardsnum) {
      card = this.allCardsMap.get(num)
      if (!collection.includes(card))
        collection.push(this.allCardsMap.get(num));
    }
  }
}
/*
id: 1,
        link: "www.bing.com",
        src: "./app/card/Captura.png",
        title: "Card 1",
        description: "test 1",
        authorId: 1,
        lang: "es"

id: 2,
        link: "www.bing2",
        src: "./app/card/Captura.png",
        title: "Card 2",
        description: "test 2",
        authorId: 2,
        lang: "es"        
*/